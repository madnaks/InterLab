// <auto-generated />
using System;
using InterLab.Infrastracture;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace InterLab.Infrastracture.Migrations
{
    [DbContext(typeof(InterLabDbContext))]
    [Migration("20230602195111_new_column_previous_close_price_time_BookMarkStocks")]
    partial class new_column_previous_close_price_time_BookMarkStocks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("InterLab.Core.Models.BookMarkStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Exchange_short")
                        .HasColumnType("text");

                    b.Property<DateTime>("Last_trade_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Previous_close_price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Previous_close_price_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<double>("Price_diff")
                        .HasColumnType("double precision");

                    b.Property<double>("Price_diff_percentage")
                        .HasColumnType("double precision");

                    b.Property<string>("Ticker")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BookMarkStocks");
                });
#pragma warning restore 612, 618
        }
    }
}
